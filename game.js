// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let player = {
    strength: 10,
    stamina: 10,
    maxStamina: 10,
    money: 100,
    reputation: 1,
    xp: 0,
    level: 1,
    upgrades: {
        dumbbells: false,
        protein: 0,
        marketing: 0,
        trainer: false
    },
    trainingMultiplier: 1
};

let gameState = {
    training: false,
    competing: false,
    npcPresent: false,
    npcStrength: 0,
    qteActive: false,
    qteCount: 0,
    qteTarget: 0,
    qteTimeLeft: 0,
    qteInterval: null,
    animationInterval: null,
    currentExercise: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const save = localStorage.getItem('gymSimSave');
    if (save) {
        const parsed = JSON.parse(save);
        Object.assign(player, parsed.player);
        updateStats();
        addLog("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ NPC
    checkForNPC();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫
    updateButtonStates();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const save = {
        player: player
    };
    localStorage.setItem('gymSimSave', JSON.stringify(save));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function updateStats() {
    document.getElementById("strength").textContent = player.strength;
    document.getElementById("stamina").textContent = player.stamina;
    document.getElementById("max-stamina").textContent = player.maxStamina;
    document.getElementById("money").textContent = player.money;
    document.getElementById("reputation").textContent = player.reputation;
    document.getElementById("level").textContent = player.level;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ–ø—ã—Ç–∞
    const xpNeeded = player.level * 100;
    const xpPercent = (player.xp / xpNeeded) * 100;
    document.getElementById("xp-bar").style.width = `${xpPercent}%`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    saveGame();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥
function addLog(message) {
    const log = document.getElementById("log");
    const entry = document.createElement("div");
    entry.className = "log-entry";
    entry.textContent = message;
    log.prepend(entry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
    if (log.children.length > 10) {
        log.removeChild(log.lastChild);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
function switchTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll(".tab-content").forEach(tab => {
        tab.classList.remove("active");
    });
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll(".tab").forEach(tab => {
        tab.classList.remove("active");
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(`${tabName}-tab`).classList.add("active");
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll(".tab").forEach(tab => {
        if (tab.textContent.toLowerCase().includes(tabName)) {
            tab.classList.add("active");
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function updateButtonStates() {
    // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    document.getElementById("regional-btn").disabled = player.reputation < 3;
    document.getElementById("national-btn").disabled = player.reputation < 5;
    
    // –ö–Ω–æ–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    document.querySelectorAll("#training-tab button").forEach(btn => {
        if (!btn.textContent.includes("–û—Ç–¥–æ—Ö–Ω—É—Ç—å")) {
            btn.disabled = player.stamina <= 0 || gameState.training;
        }
    });
    
    // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
    document.querySelectorAll("#competitions-tab button").forEach(btn => {
        if (!btn.textContent.includes("–í—ã–∑–≤–∞—Ç—å")) {
            btn.disabled = gameState.competing;
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è NPC
function checkForNPC() {
    // 30% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è NPC –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    if (Math.random() < 0.3 && !gameState.npcPresent) {
        gameState.npcPresent = true;
        gameState.npcStrength = Math.floor(player.strength * (0.8 + Math.random() * 0.4));
        document.getElementById("npc1").style.display = "block";
        document.getElementById("npc2").style.display = "block";
        addLog("–í –∑–∞–ª–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏! –ú–æ–∂–µ—à—å –±—Ä–æ—Å–∏—Ç—å –∏–º –≤—ã–∑–æ–≤.");
    }
}

// –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function startTraining(type) {
    if (player.stamina <= 0) {
        addLog("‚ùå –°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!");
        return;
    }
    
    if (gameState.training) {
        addLog("‚ùå –£–∂–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è!");
        return;
    }
    
    gameState.training = true;
    gameState.currentExercise = type;
    updateButtonStates();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    let qteTarget = 0;
    let message = "";
    
    switch(type) {
        case "bench":
            qteTarget = 10 + Math.floor(player.strength / 5);
            message = "–ñ–∏–º –ª–µ–∂–∞! –ë—ã—Å—Ç—Ä–æ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É!";
            movePlayerTo(150);
            setTimeout(() => startBenchPressAnimation(), 500);
            break;
        case "squat":
            qteTarget = 8 + Math.floor(player.strength / 5);
            message = "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è! –ë—ã—Å—Ç—Ä–æ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É!";
            movePlayerTo(250);
            setTimeout(() => startSquatAnimation(), 500);
            break;
        case "treadmill":
            qteTarget = 15 + Math.floor(player.maxStamina / 5);
            message = "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞! –ë—ã—Å—Ç—Ä–æ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É!";
            movePlayerTo(350);
            setTimeout(() => startTreadmillAnimation(), 500);
            break;
    }
    
    setTimeout(() => startQTE(type, qteTarget, message), 1000);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∂–∏–º–∞ –ª–µ–∂–∞
function startBenchPressAnimation() {
    // –ò–≥—Ä–æ–∫ –ª–µ–∂–∏—Ç –Ω–∞ —Å–∫–∞–º—å–µ
    document.getElementById("player").style.bottom = "35px";
    document.getElementById("player-arm-left").style.transform = "rotate(70deg)";
    document.getElementById("player-arm-right").style.transform = "rotate(-70deg)";
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–Ω—è—Ç–∏—è —à—Ç–∞–Ω–≥–∏
    const bar = document.getElementById("bench-press-bar");
    let direction = 1;
    
    gameState.animationInterval = setInterval(() => {
        const currentRotation = parseInt(bar.style.transform?.replace(/[^\d.-]/g, '') || 0);
        const newRotation = currentRotation + direction * 5;
        
        if (newRotation > 0) direction = -1;
        if (newRotation < -30) direction = 1;
        
        bar.style.transform = `rotate(${newRotation}deg)`;
    }, 100);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π
function startSquatAnimation() {
    const playerElem = document.getElementById("player");
    let direction = 1;
    let currentY = 0;
    
    gameState.animationInterval = setInterval(() => {
        currentY += direction * 2;
        
        if (currentY > 20) direction = -1;
        if (currentY < 0) direction = 1;
        
        playerElem.style.transform = `translateY(${currentY}px)`;
    }, 100);
}

// –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏
function startTreadmillAnimation() {
    const belt = document.getElementById("treadmill-belt");
    const display = document.getElementById("treadmill-display");
    let position = 0;
    let speed = 0;
    
    gameState.animationInterval = setInterval(() => {
        position = (position + speed) % 60;
        belt.style.backgroundPositionX = `${position}px`;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏—è—Ö –≤ QTE
        if (gameState.qteActive) {
            speed = Math.min(10, speed + 0.1);
        } else {
            speed = Math.max(0, speed - 0.05);
        }
        
        display.textContent = `${Math.round(speed * 10)} –∫–º/—á`;
    }, 50);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function completeTraining(type, successRate) {
    clearInterval(gameState.animationInterval);
    gameState.currentExercise = null;
    
    let strengthGain = 0;
    let staminaGain = 0;
    let xpGain = 0;
    
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    const trainerBonus = player.upgrades.trainer ? 1.2 : 1;
    
    switch(type) {
        case "bench":
        case "squat":
            strengthGain = Math.floor(2 * successRate * trainerBonus);
            player.strength += strengthGain;
            xpGain = strengthGain * 5;
            addLog(`üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +${strengthGain} –∫ —Å–∏–ª–µ!`);
            break;
        case "treadmill":
            staminaGain = Math.floor(3 * successRate * trainerBonus);
            player.stamina = Math.min(player.stamina + staminaGain, player.maxStamina);
            xpGain = staminaGain * 3;
            addLog(`üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +${staminaGain} –∫ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏!`);
            break;
    }
    
    // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–π
    document.getElementById("player").style.bottom = "20px";
    document.getElementById("player").style.transform = "none";
    document.getElementById("player-arm-left").style.transform = "none";
    document.getElementById("player-arm-right").style.transform = "none";
    document.getElementById("bench-press-bar").style.transform = "none";
    document.getElementById("treadmill-belt").style.backgroundPositionX = "0";
    document.getElementById("treadmill-display").textContent = "0 –∫–º/—á";
    
    // –†–∞—Å—Ö–æ–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
    player.stamina = Math.max(0, player.stamina - 1);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    player.xp += xpGain;
    checkLevelUp();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ
    movePlayerTo(50);
    gameState.training = false;
    updateStats();
    updateButtonStates();
}

// –û—Ç–¥—ã—Ö
function rest() {
    const recovery = 3 + Math.floor(player.maxStamina / 5);
    player.stamina = Math.min(player.stamina + recovery, player.maxStamina);
    addLog(`üí§ –í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${recovery} –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.`);
    updateStats();
    updateButtonStates();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function checkLevelUp() {
    const xpNeeded = player.level * 100;
    if (player.xp >= xpNeeded) {
        player.xp -= xpNeeded;
        player.level++;
        player.maxStamina += 2;
        player.stamina = player.maxStamina;
        addLog(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${player.level} —É—Ä–æ–≤–µ–Ω—å!`);
        updateStats();
    }
}

// –ù–∞—á–∞–ª–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
function startCompetition(type) {
    if (player.stamina < 5) {
        addLog("‚ùå –°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!");
        return;
    }
    
    let minStrength = 0;
    let reward = 0;
    let reputationGain = 0;
    let qteTarget = 0;
    let message = "";
    
    switch(type) {
        case "local":
            minStrength = 15;
            reward = 50 + Math.floor(Math.random() * 50);
            reputationGain = 1;
            qteTarget = 15;
            message = "–ú–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä! –ü–æ–∫–∞–∂–∏ —Å–≤–æ—é —Å–∏–ª—É!";
            break;
        case "regional":
            minStrength = 30;
            reward = 100 + Math.floor(Math.random() * 100);
            reputationGain = 2;
            qteTarget = 20;
            message = "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä! –í—Ä–µ–º—è —Å–∏—è—Ç—å!";
            break;
        case "national":
            minStrength = 50;
            reward = 200 + Math.floor(Math.random() * 200);
            reputationGain = 3;
            qteTarget = 25;
            message = "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä! –î–∞–≤–∞–π –≤—Å—ë, —á—Ç–æ –µ—Å—Ç—å!";
            break;
    }
    
    if (player.strength < minStrength) {
        addLog(`‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º ${minStrength} —Å–∏–ª—ã!`);
        return;
    }
    
    gameState.competing = true;
    updateButtonStates();
    startQTE(type, qteTarget, message, reward, reputationGain);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
function completeCompetition(type, successRate, reward, reputationGain) {
    const strengthRequired = type === "local" ? 15 : type === "regional" ? 30 : 50;
    const winThreshold = 0.7;
    
    if (successRate >= winThreshold || (player.strength > strengthRequired * 1.5 && successRate >= 0.5)) {
        const actualReward = Math.floor(reward * (0.8 + successRate * 0.4));
        player.money += actualReward;
        player.reputation += reputationGain;
        
        addLog(`üèÜ –ü–æ–±–µ–¥–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${actualReward}üí∞ –∏ +${reputationGain} –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!`);
    } else {
        const participationReward = Math.floor(reward * 0.2);
        player.money += participationReward;
        
        addLog(`ü•à –í—ã –∑–∞–Ω—è–ª–∏ –Ω–µ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ ${participationReward}üí∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ.`);
    }
    
    // –†–∞—Å—Ö–æ–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
    player.stamina = Math.max(0, player.stamina - 5);
    
    gameState.competing = false;
    updateStats();
    updateButtonStates();
    checkForNPC();
}

// –í—ã–∑–æ–≤ NPC –Ω–∞ –¥—É—ç–ª—å
function challengeNPC() {
    if (!gameState.npcPresent) {
        addLog("‚ùå –í –∑–∞–ª–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ, –∫–æ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å!");
        return;
    }
    
    if (player.stamina < 3) {
        addLog("‚ùå –°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è!");
        return;
    }
    
    const winChance = player.strength / (player.strength + gameState.npcStrength);
    const qteTarget = 10 + Math.floor(winChance * 10);
    
    startQTE("npc", qteTarget, `–î—É—ç–ª—å —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º! –ü–æ–∫–∞–∂–∏ –∫—Ç–æ —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π!`, 
        Math.floor(gameState.npcStrength * 2), 
        winChance > 0.7 ? 1 : 0);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏ —Å NPC
function completeNPCChallenge(successRate, reward, reputationGain) {
    const winThreshold = 0.6 + (player.strength - gameState.npcStrength) * 0.01;
    
    if (successRate >= winThreshold) {
        player.money += reward;
        if (reputationGain > 0) player.reputation += reputationGain;
        
        addLog(`ü•ä –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${reward}üí∞!`);
        if (reputationGain > 0) addLog(`‚≠ê –í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–≤—ã—Å–∏–ª–∞—Å—å!`);
    } else {
        addLog(`üòµ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫—É... –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!`);
    }
    
    // –£–±–∏—Ä–∞–µ–º NPC
    gameState.npcPresent = false;
    document.getElementById("npc1").style.display = "none";
    document.getElementById("npc2").style.display = "none";
    
    // –†–∞—Å—Ö–æ–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏
    player.stamina = Math.max(0, player.stamina - 3);
    
    updateStats();
    updateButtonStates();
}

// –ú–∏–Ω–∏-–∏–≥—Ä–∞ QTE (Quick Time Event)
function startQTE(type, target, message, reward, reputationGain) {
    gameState.qteActive = true;
    gameState.qteCount = 0;
    gameState.qteTarget = target;
    gameState.qteTimeLeft = 100;
    
    document.getElementById("qte-message").textContent = message;
    document.getElementById("qte-button").onclick = () => {
        if (gameState.qteActive) {
            gameState.qteCount++;
            document.getElementById("qte-button").style.transform = "scale(0.95)";
            setTimeout(() => {
                document.getElementById("qte-button").style.transform = "scale(1)";
            }, 100);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            if (gameState.currentExercise === "bench") {
                document.getElementById("bench-press-bar").style.transform = "rotate(-30deg)";
                setTimeout(() => {
                    document.getElementById("bench-press-bar").style.transform = "rotate(0deg)";
                }, 200);
            }
        }
    };
    
    document.getElementById("qte-container").style.display = "flex";
    
    // –¢–∞–π–º–µ—Ä QTE
    gameState.qteInterval = setInterval(() => {
        gameState.qteTimeLeft -= 1;
        document.getElementById("qte-progress").style.width = `${gameState.qteTimeLeft}%`;
        
        if (gameState.qteTimeLeft <= 0) {
            endQTE(type, reward, reputationGain);
        }
    }, 100);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ QTE
function endQTE(type, reward, reputationGain) {
    clearInterval(gameState.qteInterval);
    gameState.qteActive = false;
    
    const successRate = Math.min(1, gameState.qteCount / gameState.qteTarget);
    
    document.getElementById("qte-container").style.display = "none";
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
    if (gameState.training) {
        completeTraining(type, successRate);
    } else if (gameState.competing) {
        completeCompetition(type, successRate, reward, reputationGain);
    } else if (type === "npc") {
        completeNPCChallenge(successRate, reward, reputationGain);
    }
}

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—É
function movePlayerTo(xPos) {
    const playerElem = document.getElementById("player");
    playerElem.style.left = `${xPos}px`;
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(type) {
    let cost = 0;
    let message = "";
    
    switch(type) {
        case "dumbbells":
            cost = 200;
            if (player.money >= cost && !player.upgrades.dumbbells) {
                player.money -= cost;
                player.upgrades.dumbbells = true;
                player.trainingMultiplier *= 1.1;
                message = "‚úÖ –ö—É–ø–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –≥–∞–Ω—Ç–µ–ª–∏! –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –Ω–∞ 10%.";
            } else if (player.upgrades.dumbbells) {
                message = "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ!";
            } else {
                message = `‚ùå –ù—É–∂–Ω–æ –µ—â—ë ${cost - player.money}üí∞!`;
            }
            break;
            
        case "protein":
            cost = 150;
            if (player.money >= cost) {
                player.money -= cost;
                player.upgrades.protein++;
                player.maxStamina += 1;
                message = "‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –ø—Ä–æ—Ç–µ–∏–Ω! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å +1.";
            } else {
                message = `‚ùå –ù—É–∂–Ω–æ –µ—â—ë ${cost - player.money}üí∞!`;
            }
            break;
            
        case "marketing":
            cost = 300;
            if (player.money >= cost) {
                player.money -= cost;
                player.upgrades.marketing++;
                player.reputation += 1;
                message = "‚úÖ –í—ã –≤–ª–æ–∂–∏–ª–∏—Å—å –≤ —Ä–µ–∫–ª–∞–º—É! –†–µ–ø—É—Ç–∞—Ü–∏—è +1.";
            } else {
                message = `‚ùå –ù—É–∂–Ω–æ –µ—â—ë ${cost - player.money}üí∞!`;
            }
            break;
            
        case "trainer":
            cost = 500;
            if (player.money >= cost && !player.upgrades.trainer) {
                player.money -= cost;
                player.upgrades.trainer = true;
                player.trainingMultiplier *= 1.2;
                message = "‚úÖ –í—ã –Ω–∞–Ω—è–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–µ–ø–µ—Ä—å –Ω–∞ 20% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.";
            } else if (player.upgrades.trainer) {
                message = "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–µ—Ä!";
            } else {
                message = `‚ùå –ù—É–∂–Ω–æ –µ—â—ë ${cost - player.money}üí∞!`;
            }
            break;
    }
    
    if (message) addLog(message);
    updateStats();
    updateButtonStates();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = function() {
    initGame();
    addLog("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª–∞!");
    addLog("–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–π –∑–∞–ª!");
};
